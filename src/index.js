// Pre-defined shell scripts for direct download (like sampletestfile.com)
const STATIC_FILES = {
  'permission-test': `#!/bin/bash
# Browser Permission Tester - System Permission Test Script
# Generated by https://browser-permission-tester.example.com
# For defensive security testing only

echo "=== System Permission Tests ==="
echo "Current user: $(whoami)"
echo "Current directory: $(pwd)"
echo "Date: $(date)"
echo

# File system permissions
echo "=== File System Tests ==="
echo "Testing file creation..."
touch /tmp/test_file && echo "[OK] Can create files in /tmp" || echo "[FAIL] Cannot create files in /tmp"
rm -f /tmp/test_file

echo "Testing directory listing..."
ls /etc > /dev/null 2>&1 && echo "[OK] Can list /etc directory" || echo "[FAIL] Cannot list /etc directory"

echo "Testing home directory access..."
ls ~ > /dev/null 2>&1 && echo "[OK] Can access home directory" || echo "[FAIL] Cannot access home directory"

# Network permissions
echo "=== Network Tests ==="
echo "Testing network connectivity..."
ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo "[OK] Network connectivity available" || echo "[FAIL] No network connectivity"

echo "Testing DNS resolution..."
nslookup google.com > /dev/null 2>&1 && echo "[OK] DNS resolution working" || echo "[FAIL] DNS resolution failed"

# Process permissions
echo "=== Process Tests ==="
echo "Testing process listing..."
ps aux > /dev/null 2>&1 && echo "[OK] Can list processes" || echo "[FAIL] Cannot list processes"

echo "Testing system information..."
uname -a 2>/dev/null && echo "[OK] System info accessible" || echo "[FAIL] System info restricted"

echo "=== Test Complete ==="`,

  'system-info': `#!/bin/bash
# Browser Permission Tester - System Information Gathering Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE SECURITY TESTING ONLY

echo "=== System Information Gathering ==="
echo "Generated: $(date)"
echo "Hostname: $(hostname)"
echo "OS: $(uname -a)"
echo "Current user: $(whoami)"
echo "User ID: $(id)"
echo "Home directory: $HOME"
echo

echo "=== Network Information ==="
ip addr show 2>/dev/null || ifconfig 2>/dev/null
netstat -an 2>/dev/null | head -10
echo

echo "=== Process Information ==="
ps aux 2>/dev/null | head -10
echo

echo "=== File System ==="
df -h 2>/dev/null
echo

echo "=== Security Tools ==="
command -v sudo >/dev/null 2>&1 && echo "[OK] sudo available" || echo "[FAIL] sudo not available"
command -v ssh >/dev/null 2>&1 && echo "[OK] ssh available" || echo "[FAIL] ssh not available"
echo "=== Complete ==="`,

  'network-test': `#!/bin/bash
# Browser Permission Tester - Network Connectivity Test Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE TESTING ONLY

# Configuration
TARGET_IP="YOUR_IP_HERE"
TARGET_PORT="4444"

echo "=== Network Connectivity Test ==="
echo "Target: $TARGET_IP:$TARGET_PORT"
echo "WARNING: This is for authorized testing only!"
echo

# Test various network methods
echo "Testing netcat connectivity..."
if command -v nc >/dev/null 2>&1; then
    echo "Netcat available - would execute: nc $TARGET_IP $TARGET_PORT"
else
    echo "Netcat not available"
fi
echo

echo "Testing bash connectivity..."
echo "Would test: /dev/tcp/$TARGET_IP/$TARGET_PORT"
echo

echo "Testing python connectivity..."
if command -v python3 >/dev/null 2>&1; then
    echo "Python3 available for network testing"
elif command -v python >/dev/null 2>&1; then
    echo "Python2 available for network testing"
else
    echo "Python not available"
fi
echo

echo "=== Test Complete - No actual connections made ==="
echo "Replace YOUR_IP_HERE with actual target IP for testing"`,

  'basic-info': `#!/bin/bash
# Browser Permission Tester - Basic System Information Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE SECURITY TESTING ONLY

echo "=== Basic System Information ==="
echo "Script started: $(date)"
echo

# Basic info
echo "=== System Information ==="
echo "Kernel: $(uname -r)"
echo "Architecture: $(uname -m)"
echo "Hostname: $(hostname)"
echo "Uptime: $(uptime)"
echo

# User context
echo "=== User Context ==="
echo "Current user: $(whoami) ($(id))"
echo "Shell: $SHELL"
echo "Path: $PATH"
echo

# Network interfaces
echo "=== Network Interfaces ==="
ip a 2>/dev/null || ifconfig 2>/dev/null || echo "Network commands not available"
echo

# Listening services
echo "=== Listening Services ==="
netstat -tlnp 2>/dev/null | head -10 || ss -tlnp 2>/dev/null | head -10 || echo "Netstat/ss not available"
echo

# Running processes
echo "=== Running Processes ==="
ps aux 2>/dev/null | head -15 || echo "Process listing not available"
echo

echo "=== Information Complete ==="`,

  'web-test': `#!/bin/bash
# Browser Permission Tester - Web Testing Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE SECURITY TESTING ONLY

echo "=== Web Service Testing ==="
echo "Started: $(date)"
echo

# Test common web ports
echo "=== Port Connectivity Tests ==="
for port in 80 443 8080 8443 3000 5000; do
    if command -v nc >/dev/null 2>&1; then
        nc -z -w1 localhost $port 2>/dev/null && echo "[OK] Port $port is open" || echo "[FAIL] Port $port is closed/filtered"
    else
        echo "[INFO] Port $port (netcat not available for testing)"
    fi
done
echo

# Test web requests
echo "=== Web Request Tests ==="
if command -v curl >/dev/null 2>&1; then
    echo "Testing external connectivity..."
    curl -s -I -m 5 http://httpbin.org/status/200 > /dev/null && echo "[OK] External HTTP requests work" || echo "[FAIL] External HTTP blocked"
    curl -s -I -m 5 https://httpbin.org/status/200 > /dev/null && echo "[OK] External HTTPS requests work" || echo "[FAIL] External HTTPS blocked"
elif command -v wget >/dev/null 2>&1; then
    echo "Testing external connectivity with wget..."
    wget --spider --timeout=5 http://httpbin.org/status/200 2>/dev/null && echo "[OK] External HTTP requests work" || echo "[FAIL] External HTTP blocked"
    wget --spider --timeout=5 https://httpbin.org/status/200 2>/dev/null && echo "[OK] External HTTPS requests work" || echo "[FAIL] External HTTPS blocked"
else
    echo "[FAIL] No curl or wget available for web testing"
fi
echo

echo "=== Web Testing Complete ==="`,

  'advanced-info': `#!/bin/bash
# Browser Permission Tester - Advanced System Information Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE SECURITY TESTING ONLY

echo "=== Advanced System Information ==="
echo "Script started: $(date)"
echo "Hostname: $(hostname)"
echo

# Detailed system information
echo "=== Detailed System Information ==="
echo "Kernel version: $(uname -rv)"
echo "Architecture: $(uname -m)"
echo "Operating System: $(cat /etc/os-release 2>/dev/null | grep PRETTY_NAME | cut -d= -f2 | tr -d '\"' || echo 'Unknown')"
echo "Hardware: $(dmidecode -s system-product-name 2>/dev/null || echo 'N/A')"
echo "CPU info: $(grep -m1 'model name' /proc/cpuinfo 2>/dev/null | cut -d':' -f2 | xargs || echo 'N/A')"
echo "CPU cores: $(nproc 2>/dev/null || echo 'N/A')"
echo "Total memory: $(free -h 2>/dev/null | awk '/^Mem:/ {print $2}' || echo 'N/A')"
echo "Available memory: $(free -h 2>/dev/null | awk '/^Mem:/ {print $7}' || echo 'N/A')"
echo

# Environment variables
echo "=== Environment Variables ==="
env | grep -E '^(PATH|HOME|USER|SHELL|PWD|TERM|LANG)' 2>/dev/null | head -20
echo

# Container/virtualization detection
echo "=== Container/Virtualization Detection ==="
if [ -f /.dockerenv ]; then
    echo "[DETECTED] Docker container"
fi
if command -v systemd-detect-virt >/dev/null 2>&1; then
    virt=$(systemd-detect-virt 2>/dev/null)
    [ "$virt" != "none" ] && echo "[DETECTED] Virtualization: $virt"
fi
if [ -d /proc/vz ]; then
    echo "[DETECTED] OpenVZ container"
fi
if grep -q lxc /proc/1/cgroup 2>/dev/null; then
    echo "[DETECTED] LXC container"
fi
echo

# File system details
echo "=== File System Information ==="
echo "Mounted filesystems:"
mount 2>/dev/null | column -t | head -10
echo
echo "Disk usage by filesystem:"
df -h 2>/dev/null
echo
echo "Inode usage:"
df -i 2>/dev/null | head -5
echo

# Network detailed information
echo "=== Network Configuration ==="
echo "Routing table:"
ip route 2>/dev/null || route -n 2>/dev/null
echo
echo "DNS configuration:"
cat /etc/resolv.conf 2>/dev/null | head -10
echo
echo "Network connections:"
ss -tuln 2>/dev/null | head -10 || netstat -tuln 2>/dev/null | head -10
echo
echo "ARP table:"
ip neigh 2>/dev/null | head -5 || arp -a 2>/dev/null | head -5
echo

# Process and service information
echo "=== Process and Service Details ==="
echo "Process tree:"
pstree 2>/dev/null | head -10 || ps auxf 2>/dev/null | head -10
echo
echo "Running services:"
systemctl list-units --type=service --state=running 2>/dev/null | head -10 || service --status-all 2>/dev/null | grep running | head -10
echo
echo "Open files by processes:"
lsof 2>/dev/null | head -10 || echo "lsof not available"
echo

# Security information
echo "=== Security Configuration ==="
echo "User accounts:"
cat /etc/passwd 2>/dev/null | cut -d: -f1,3,4,6,7 | head -10
echo
echo "Groups:"
cat /etc/group 2>/dev/null | head -10
echo
echo "Sudo configuration:"
sudo -l 2>/dev/null | head -5 || echo "Sudo not available or no permissions"
echo
echo "SSH configuration:"
ls -la /etc/ssh/ 2>/dev/null || echo "SSH config not accessible"
if [ -f /etc/ssh/sshd_config ]; then
    grep -E '^(Port|PasswordAuthentication|PubkeyAuthentication|PermitRootLogin)' /etc/ssh/sshd_config 2>/dev/null
fi
echo

# Package management
echo "=== Installed Software ==="
if command -v dpkg >/dev/null 2>&1; then
    echo "Debian packages (first 10):"
    dpkg -l 2>/dev/null | head -10
elif command -v rpm >/dev/null 2>&1; then
    echo "RPM packages (first 10):"
    rpm -qa 2>/dev/null | head -10
elif command -v pacman >/dev/null 2>&1; then
    echo "Arch packages (first 10):"
    pacman -Q 2>/dev/null | head -10
else
    echo "Package manager not detected"
fi
echo

# Scheduled tasks
echo "=== Scheduled Tasks ==="
echo "Cron jobs for current user:"
crontab -l 2>/dev/null | head -5 || echo "No cron jobs or access denied"
echo
echo "System cron jobs:"
ls -la /etc/cron* 2>/dev/null | head -5
echo

# Kernel and modules
echo "=== Kernel Information ==="
echo "Kernel modules (loaded):"
lsmod 2>/dev/null | head -10 || echo "Module info not available"
echo
echo "Kernel parameters:"
sysctl kernel.version kernel.ostype kernel.hostname 2>/dev/null
echo

# Hardware information
echo "=== Hardware Information ==="
echo "PCI devices:"
lspci 2>/dev/null | head -5 || echo "PCI info not available"
echo
echo "USB devices:"
lsusb 2>/dev/null | head -5 || echo "USB info not available"
echo
echo "Block devices:"
lsblk 2>/dev/null || echo "Block device info not available"
echo

# Log files
echo "=== System Logs ==="
echo "Recent system messages:"
tail -5 /var/log/messages 2>/dev/null || tail -5 /var/log/syslog 2>/dev/null || echo "System logs not accessible"
echo
echo "Authentication logs:"
tail -3 /var/log/auth.log 2>/dev/null || tail -3 /var/log/secure 2>/dev/null || echo "Auth logs not accessible"
echo

# Interesting files
echo "=== Interesting Files ==="
echo "World-writable files (first 5):"
find / -type f -perm -002 2>/dev/null | head -5 || echo "Permission denied or not found"
echo
echo "SUID files (first 5):"
find / -type f -perm -4000 2>/dev/null | head -5 || echo "Permission denied or not found"
echo
echo "Files in /tmp:"
ls -la /tmp 2>/dev/null | head -10 || echo "/tmp not accessible"
echo

echo "=== Advanced Information Complete ==="
echo "Scan finished: $(date)"`,

  'service-probe': `#!/bin/bash
# Browser Permission Tester - Service Probing and Port Analysis Script
# Generated by https://browser-permission-tester.example.com
# FOR DEFENSIVE SECURITY TESTING ONLY

echo "=== Service Probing and Port Analysis ==="
echo "Script started: $(date)"
echo "Target: $(hostname) ($(hostname -I | xargs))"
echo

# Port scanning and service identification
echo "=== Port Analysis ==="
EXPOSED_PORTS="873 8888 9000 1384 38889 57399 51247"

for port in $EXPOSED_PORTS; do
    echo "--- Analyzing Port $port ---"
    
    # Check if port is listening
    if ss -tuln | grep -q ":$port "; then
        echo "[OPEN] Port $port is listening"
        
        # Get process information
        process_info=$(ss -tulnp | grep ":$port " | awk '{print $NF}')
        echo "Process: $process_info"
        
        # Try to get service banner/info
        echo "Banner/Response:"
        timeout 3 bash -c "echo '' | nc localhost $port" 2>/dev/null | head -5 || echo "No banner response"
        
        # HTTP-specific checks
        if [ "$port" = "8888" ] || [ "$port" = "9000" ]; then
            echo "HTTP Response Headers:"
            timeout 5 curl -s -I "http://localhost:$port" 2>/dev/null | head -10 || echo "No HTTP response"
            echo
            echo "HTTP GET Response:"
            timeout 5 curl -s "http://localhost:$port" 2>/dev/null | head -10 || echo "No HTTP content"
        fi
        
        # rsync-specific checks
        if [ "$port" = "873" ]; then
            echo "rsync Module List:"
            timeout 5 rsync rsync://localhost:$port/ 2>/dev/null || echo "rsync query failed"
        fi
        
    else
        echo "[CLOSED] Port $port not listening or filtered"
    fi
    echo
done

# Jupyter Notebook Investigation
echo "=== Jupyter Notebook Analysis ==="
if ss -tuln | grep -q ":8888 "; then
    echo "Jupyter is running on port 8888"
    
    # Check if authentication is required
    echo "Testing Jupyter access:"
    auth_check=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" "http://localhost:8888" 2>/dev/null)
    echo "HTTP Status: $auth_check"
    
    if [ "$auth_check" = "200" ]; then
        echo "[CRITICAL] Jupyter accessible without authentication!"
        echo "Available endpoints:"
        timeout 5 curl -s "http://localhost:8888/api" 2>/dev/null | head -5
        echo
        echo "Tree API (file listing):"
        timeout 5 curl -s "http://localhost:8888/api/contents" 2>/dev/null | head -10
    elif [ "$auth_check" = "302" ] || [ "$auth_check" = "401" ]; then
        echo "[INFO] Jupyter requires authentication"
    fi
fi
echo

# rsync Service Investigation
echo "=== rsync Service Analysis ==="
if ss -tuln | grep -q ":873 "; then
    echo "rsync daemon is running"
    
    # List available modules
    echo "Available rsync modules:"
    timeout 10 rsync --list-only rsync://localhost/ 2>/dev/null || echo "Module listing failed"
    
    # Try common module names
    for module in share backup home data files; do
        echo "Testing module: $module"
        timeout 5 rsync --list-only rsync://localhost/$module/ 2>/dev/null | head -5
    done
fi
echo

# Network Service Discovery
echo "=== Network Service Discovery ==="
echo "All listening services:"
ss -tulnp | grep LISTEN
echo
echo "Service processes:"
ps aux | grep -E "(rsync|jupyter|python|nginx|apache|ssh)" | grep -v grep
echo

# File System Investigation
echo "=== File System Investigation ==="
echo "Jupyter configuration:"
find /home -name "*.ipynb" -o -name "jupyter*" 2>/dev/null | head -10
echo
echo "rsync configuration:"
cat /etc/rsyncd.conf 2>/dev/null || echo "No rsync config found"
echo
echo "Service logs:"
ls -la /var/log/ | grep -E "(rsync|jupyter|nginx|apache)" | head -5
echo

# Network Connectivity Testing
echo "=== Network Connectivity Testing ==="
echo "Testing external connectivity from container:"
timeout 5 curl -s -I https://httpbin.org/get >/dev/null && echo "[OK] External HTTPS works" || echo "[FAIL] External HTTPS blocked"
timeout 5 curl -s -I http://httpbin.org/get >/dev/null && echo "[OK] External HTTP works" || echo "[FAIL] External HTTP blocked"
echo
echo "DNS resolution test:"
nslookup google.com 2>/dev/null | head -5 || echo "DNS resolution failed"
echo

# Container Security Analysis (Safe probes)
echo "=== Container Security Analysis ==="
echo "Container runtime detection:"
cat /proc/1/cgroup 2>/dev/null | head -3
echo
echo "Mounted volumes:"
mount | grep -v "tmpfs\|proc\|sys" | head -10
echo
echo "Docker socket check:"
ls -la /var/run/docker.sock 2>/dev/null && echo "[CRITICAL] Docker socket accessible!" || echo "[OK] Docker socket not accessible"
echo
echo "Privileged capabilities:"
grep Cap /proc/self/status 2>/dev/null
echo

# Memory and Process Analysis
echo "=== Memory and Process Analysis ==="
echo "Memory usage:"
free -h
echo
echo "Process tree (alternative method):"
ps auxf 2>/dev/null | head -20
echo
echo "Environment variables of key processes:"
for pid in $(pgrep -f "jupyter\|rsync"); do
    echo "PID $pid environment:"
    cat /proc/$pid/environ 2>/dev/null | tr '\0' '\n' | head -5
    echo
done

# Permission Analysis
echo "=== Permission Analysis ==="
echo "Current user capabilities:"
id
groups
echo
echo "Writable directories:"
find / -type d -writable 2>/dev/null | grep -v proc | head -10
echo
echo "Recently modified files:"
find /home /tmp /var -type f -mtime -1 2>/dev/null | head -10
echo

echo "=== Service Probe Complete ==="
echo "Scan finished: $(date)"`
};

// Function to get JavaScript content
function getJavaScriptContent() {
  return `
let keylogBuffer = [];
let isKeylogging = false;
let storedFiles = new Map(); // Store files in memory

function log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const results = document.getElementById('results');
    const prefix = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';
    results.textContent += '[' + timestamp + '] ' + prefix + ' ' + message + '\\n';
    results.scrollTop = results.scrollHeight;
    
    // Send to backend
    fetch('/api/log', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ timestamp, type, message })
    }).catch(e => console.error('Failed to log to backend:', e));
}

// File System Tests
function testFileInput() {
    document.getElementById('fileInput').style.display = 'block';
    document.getElementById('fileInput').click();
}

function handleFileSelect() {
    const files = document.getElementById('fileInput').files;
    log('File input selected ' + files.length + ' files: ' + Array.from(files).map(f => f.name).join(', '), 'success');
}

async function testFileSystemAccess() {
    if ('showOpenFilePicker' in window) {
        try {
            const fileHandles = await window.showOpenFilePicker({ multiple: true });
            log('File System Access API: Selected ' + fileHandles.length + ' files', 'success');
            for (const handle of fileHandles) {
                const file = await handle.getFile();
                log('  - ' + file.name + ' (' + file.size + ' bytes)', 'info');
            }
        } catch (error) {
            log('File System Access API error: ' + error.message, 'error');
        }
    } else {
        log('File System Access API not supported', 'error');
    }
}

function testDragDrop() {
    const dropZone = document.getElementById('dropZone');
    dropZone.style.display = 'block';
    
    dropZone.ondragover = (e) => {
        e.preventDefault();
        dropZone.style.background = '#e6fffa';
    };
    
    dropZone.ondragleave = () => {
        dropZone.style.background = '#f7fafc';
    };
    
    dropZone.ondrop = (e) => {
        e.preventDefault();
        const files = e.dataTransfer.files;
        log('Drag & drop: Received ' + files.length + ' files', 'success');
        for (const file of files) {
            log('  - ' + file.name + ' (' + file.size + ' bytes)', 'info');
        }
        dropZone.style.background = '#f7fafc';
    };
}

function testDownload() {
    const blob = new Blob(['Test file content for download'], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'test-download.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    log('Download test: File download initiated', 'success');
}

function testFileUploadAndStore() {
    document.getElementById('uploadInput').click();
}

async function handleFileUpload() {
    const fileInput = document.getElementById('uploadInput');
    const files = fileInput.files;
    
    if (!files.length) {
        log('No files selected', 'error');
        return;
    }

    log('Processing ' + files.length + ' files for storage...', 'info');

    for (const file of files) {
        try {
            await processAndStoreFile(file);
        } catch (error) {
            log('Error processing file ' + file.name + ': ' + error.message, 'error');
        }
    }

    updateStoredFilesDisplay();
    fileInput.value = ''; // Clear the input
}

async function processAndStoreFile(file) {
    const fileId = generateFileId();
    const maxSize = 10 * 1024 * 1024; // 10MB limit

    if (file.size > maxSize) {
        throw new Error('File too large (max 10MB)');
    }

    const fileInfo = {
        id: fileId,
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: file.lastModified,
        uploadTime: Date.now()
    };

    // Read file content
    const content = await readFileContent(file);
    fileInfo.content = content;
    fileInfo.contentPreview = getContentPreview(content, file.type);

    // Store file
    storedFiles.set(fileId, fileInfo);
    
    log('File stored: ' + file.name + ' (' + formatFileSize(file.size) + ')', 'success');

    // Log to backend
    try {
        await fetch('/api/log', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                type: 'file_upload',
                filename: file.name,
                size: file.size,
                type: file.type,
                timestamp: new Date().toISOString()
            })
        });
    } catch (e) {
        console.error('Failed to log file upload:', e);
    }
}

function readFileContent(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        
        reader.onload = (e) => {
            try {
                if (file.type.startsWith('text/') || file.type === 'application/json' || file.name.endsWith('.txt') || file.name.endsWith('.js') || file.name.endsWith('.html') || file.name.endsWith('.css')) {
                    // Read as text for text files
                    resolve({
                        type: 'text',
                        data: e.target.result
                    });
                } else {
                    // Read as base64 for binary files
                    resolve({
                        type: 'base64',
                        data: e.target.result.split(',')[1] // Remove data:... prefix
                    });
                }
            } catch (error) {
                reject(error);
            }
        };
        
        reader.onerror = () => reject(new Error('Failed to read file'));
        
        if (file.type.startsWith('text/') || file.type === 'application/json' || file.name.endsWith('.txt') || file.name.endsWith('.js') || file.name.endsWith('.html') || file.name.endsWith('.css')) {
            reader.readAsText(file);
        } else {
            reader.readAsDataURL(file);
        }
    });
}

function getContentPreview(content, fileType) {
    if (content.type === 'text') {
        return content.data.substring(0, 200) + (content.data.length > 200 ? '...' : '');
    } else {
        return '[Binary content - ' + fileType + ']';
    }
}

function generateFileId() {
    return 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function updateStoredFilesDisplay() {
    const container = document.getElementById('storedFilesContainer');
    const filesList = document.getElementById('storedFilesList');
    
    if (storedFiles.size === 0) {
        container.style.display = 'none';
        return;
    }

    container.style.display = 'block';
    filesList.innerHTML = '';

    Array.from(storedFiles.values())
        .sort((a, b) => b.uploadTime - a.uploadTime)
        .forEach(file => {
            const fileElement = createFileElement(file);
            filesList.appendChild(fileElement);
        });
}

function createFileElement(file) {
    const div = document.createElement('div');
    div.className = 'stored-file-item';
    div.style.cssText = 'margin:10px 0; padding:12px; border:1px solid #e2e8f0; border-radius:6px; background:white;';
    
    const uploadTime = new Date(file.uploadTime).toLocaleString();
    
    div.innerHTML = '<div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:8px;">' +
        '<strong style="color:#2d3748;">' + escapeHtml(file.name) + '</strong>' +
        '<span style="color:#718096; font-size:12px;">' + uploadTime + '</span>' +
        '</div>' +
        '<div style="font-size:13px; color:#4a5568; margin-bottom:8px;">' +
        'Size: ' + formatFileSize(file.size) + ' | Type: ' + (file.type || 'Unknown') +
        '</div>' +
        '<div style="background:#f7fafc; padding:8px; border-radius:4px; font-family:monospace; font-size:12px; color:#2d3748; margin-bottom:8px; max-height:60px; overflow-y:auto;">' +
        escapeHtml(file.contentPreview) +
        '</div>' +
        '<div style="display:flex; gap:8px;">' +
        '<button onclick="viewFileContent(\\'' + file.id + '\\')" style="padding:4px 8px; background:#4299e1; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">View</button>' +
        '<button onclick="downloadStoredFile(\\'' + file.id + '\\')" style="padding:4px 8px; background:#48bb78; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">Download</button>' +
        '<button onclick="deleteStoredFile(\\'' + file.id + '\\')" style="padding:4px 8px; background:#f56565; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">Delete</button>' +
        '</div>';
    
    return div;
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function clearStoredFiles() {
    if (storedFiles.size === 0) {
        log('No files to clear', 'info');
        return;
    }

    if (confirm('Clear all stored files (' + storedFiles.size + ' files)?')) {
        const count = storedFiles.size;
        storedFiles.clear();
        updateStoredFilesDisplay();
        log('Cleared all stored files (' + count + ' files)', 'success');
    }
}

// Network Tests
async function testFetch() {
    try {
        const response = await fetch('/api/external-test');
        const data = await response.json();
        log('Fetch API test: ' + JSON.stringify(data), 'success');
    } catch (error) {
        log('Fetch API error: ' + error.message, 'error');
    }
}

async function testCrossOrigin() {
    try {
        const response = await fetch('https://httpbin.org/json');
        const data = await response.json();
        log('Cross-origin request successful', 'success');
    } catch (error) {
        log('Cross-origin request blocked: ' + error.message, 'error');
    }
}

function testWebSocket() {
    try {
        const ws = new WebSocket('wss://echo.websocket.org');
        ws.onopen = () => {
            log('WebSocket connection established', 'success');
            ws.send('Test message');
        };
        ws.onmessage = (event) => {
            log('WebSocket received: ' + event.data, 'success');
            ws.close();
        };
        ws.onerror = (error) => {
            log('WebSocket error: ' + error, 'error');
        };
    } catch (error) {
        log('WebSocket test error: ' + error.message, 'error');
    }
}

async function testWebRTC() {
    try {
        const pc = new RTCPeerConnection();
        const offer = await pc.createOffer();
        log('WebRTC offer created successfully', 'success');
        pc.close();
    } catch (error) {
        log('WebRTC error: ' + error.message, 'error');
    }
}

// Device Permission Tests
async function testCamera() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        log('Camera access granted', 'success');
        stream.getTracks().forEach(track => track.stop());
    } catch (error) {
        log('Camera access denied: ' + error.message, 'error');
    }
}

async function testMicrophone() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        log('Microphone access granted', 'success');
        stream.getTracks().forEach(track => track.stop());
    } catch (error) {
        log('Microphone access denied: ' + error.message, 'error');
    }
}

async function testGeolocation() {
    if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                log('Geolocation: ' + position.coords.latitude + ', ' + position.coords.longitude, 'success');
            },
            (error) => {
                log('Geolocation error: ' + error.message, 'error');
            }
        );
    } else {
        log('Geolocation not supported', 'error');
    }
}

function testDeviceOrientation() {
    if ('DeviceOrientationEvent' in window) {
        const handler = (event) => {
            log('Device orientation: α=' + event.alpha + ', β=' + event.beta + ', γ=' + event.gamma, 'success');
            window.removeEventListener('deviceorientation', handler);
        };
        window.addEventListener('deviceorientation', handler);
        setTimeout(() => {
            window.removeEventListener('deviceorientation', handler);
            log('Device orientation timeout - no data received', 'error');
        }, 3000);
    } else {
        log('Device orientation not supported', 'error');
    }
}

async function testClipboard() {
    if ('clipboard' in navigator) {
        try {
            await navigator.clipboard.writeText('Test clipboard content');
            const text = await navigator.clipboard.readText();
            log('Clipboard access: wrote and read "' + text + '"', 'success');
        } catch (error) {
            log('Clipboard error: ' + error.message, 'error');
        }
    } else {
        log('Clipboard API not supported', 'error');
    }
}

async function testNotifications() {
    if ('Notification' in window) {
        const permission = await Notification.requestPermission();
        log('Notification permission: ' + permission, permission === 'granted' ? 'success' : 'error');
        if (permission === 'granted') {
            new Notification('Test notification from permission tester');
        }
    } else {
        log('Notifications not supported', 'error');
    }
}

// Storage Tests
function testLocalStorage() {
    try {
        localStorage.setItem('test', 'value');
        const value = localStorage.getItem('test');
        localStorage.removeItem('test');
        log('Local storage: wrote and read "' + value + '"', 'success');
    } catch (error) {
        log('Local storage error: ' + error.message, 'error');
    }
}

async function testIndexedDB() {
    if ('indexedDB' in window) {
        try {
            const request = indexedDB.open('testDB', 1);
            request.onsuccess = () => {
                log('IndexedDB: Database opened successfully', 'success');
                request.result.close();
                indexedDB.deleteDatabase('testDB');
            };
            request.onerror = () => {
                log('IndexedDB error: ' + request.error, 'error');
            };
        } catch (error) {
            log('IndexedDB error: ' + error.message, 'error');
        }
    } else {
        log('IndexedDB not supported', 'error');
    }
}

function testCookies() {
    try {
        document.cookie = 'test=value; path=/';
        const cookies = document.cookie;
        log('Cookies: ' + cookies, 'success');
    } catch (error) {
        log('Cookie error: ' + error.message, 'error');
    }
}

async function testCacheAPI() {
    if ('caches' in window) {
        try {
            const cache = await caches.open('test-cache');
            await cache.put('/test', new Response('test'));
            const response = await cache.match('/test');
            const text = await response.text();
            log('Cache API: stored and retrieved "' + text + '"', 'success');
            await caches.delete('test-cache');
        } catch (error) {
            log('Cache API error: ' + error.message, 'error');
        }
    } else {
        log('Cache API not supported', 'error');
    }
}

// Red Team Tests
function testKeylogger() {
    if (!isKeylogging) {
        isKeylogging = true;
        keylogBuffer = [];
        document.addEventListener('keydown', keylogHandler);
        log('Input monitoring started - type something to test', 'success');
        setTimeout(() => {
            document.removeEventListener('keydown', keylogHandler);
            isKeylogging = false;
            log('Input monitoring captured: ' + keylogBuffer.join(''), 'success');
        }, 10000);
    }
}

function keylogHandler(event) {
    keylogBuffer.push(event.key);
    if (keylogBuffer.length > 50) {
        keylogBuffer.shift();
    }
}

async function testScreenCapture() {
    try {
        const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });
        log('Screen capture access granted', 'success');
        stream.getTracks().forEach(track => track.stop());
    } catch (error) {
        log('Screen capture denied: ' + error.message, 'error');
    }
}

function testCredentialHarvest() {
    const form = document.createElement('form');
    form.innerHTML = '<input type="text" placeholder="Username" id="testUsername">' +
        '<input type="password" placeholder="Password" id="testPassword">' +
        '<button type="submit">Test Submit</button>';
    form.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:2px solid #ccc;z-index:1000;';
    
    form.onsubmit = (e) => {
        e.preventDefault();
        const username = document.getElementById('testUsername').value;
        const password = document.getElementById('testPassword').value;
        log('Credential harvest test: username="' + username + '", password="' + password + '"', 'success');
        document.body.removeChild(form);
    };
    
    document.body.appendChild(form);
    log('Credential harvest form displayed', 'info');
}

async function testDataExfiltration() {
    const sensitiveData = {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
        cookieEnabled: navigator.cookieEnabled,
        onLine: navigator.onLine,
        screenResolution: screen.width + 'x' + screen.height,
        availableScreenSize: screen.availWidth + 'x' + screen.availHeight,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    };
    
    try {
        const response = await fetch('/api/log', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ type: 'exfiltration', data: sensitiveData })
        });
        log('Data exfiltration test: Sensitive data sent to server', 'success');
    } catch (error) {
        log('Data exfiltration failed: ' + error.message, 'error');
    }
}

function testCSRFExtraction() {
    const tokens = [];
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        const csrfInputs = form.querySelectorAll('input[name*="csrf"], input[name*="token"]');
        csrfInputs.forEach(input => {
            tokens.push({ name: input.name, value: input.value });
        });
    });
    
    const metaTags = document.querySelectorAll('meta[name*="csrf"], meta[name*="token"]');
    metaTags.forEach(meta => {
        tokens.push({ name: meta.name, content: meta.content });
    });
    
    log('CSRF token extraction: Found ' + tokens.length + ' potential tokens', tokens.length > 0 ? 'success' : 'info');
    tokens.forEach(token => {
        log('  - ' + token.name + ': ' + (token.value || token.content), 'info');
    });
}

// Script generation functions would go here...
function generateShellScript() {
    const scriptName = document.getElementById('scriptName').value || 'test-script.sh';
    const scriptContent = document.getElementById('scriptContent').value;
    
    if (!scriptContent.trim()) {
        log('Error: Script content cannot be empty', 'error');
        return;
    }
    
    let finalContent = scriptContent;
    if (!finalContent.startsWith('#!')) {
        finalContent = '#!/bin/bash\\n' + finalContent;
    }
    
    const finalFilename = scriptName.endsWith('.sh') ? scriptName : scriptName + '.sh';
    
    // Try download methods
    try {
        const dataUrl = 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(finalContent);
        const a = document.createElement('a');
        a.href = dataUrl;
        a.download = finalFilename;
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        log('Downloaded script: ' + finalFilename, 'success');
    } catch (error) {
        log('Download failed: ' + error.message, 'error');
    }
}

function loadTemplateScript() {
    const template = \`#!/bin/bash
# Permission Testing Script
echo "=== System Permission Tests ==="
echo "Current user: $(whoami)"
echo "Current directory: $(pwd)"
echo "Date: $(date)"
echo "=== File System Tests ==="
touch /tmp/test_file && echo "[OK] Can create files" || echo "[FAIL] Cannot create files"
rm -f /tmp/test_file
echo "=== Network Tests ==="
ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo "[OK] Network available" || echo "[FAIL] No network"
echo "=== Test Complete ==="\`;
    
    document.getElementById('scriptContent').value = template;
    document.getElementById('scriptName').value = 'permission-test.sh';
    log('Permission test template loaded', 'success');
}

function loadNetworkTestTemplate() {
    const template = \`#!/bin/bash
# Network Test Template
TARGET_IP="YOUR_IP_HERE"
TARGET_PORT="4444"
echo "=== Network Connectivity Test ==="
echo "Target: $TARGET_IP:$TARGET_PORT"
echo "Testing connectivity..."
if command -v nc >/dev/null 2>&1; then
    echo "Netcat available"
else
    echo "Netcat not available"
fi
echo "=== Test Complete ==="\`;
    
    document.getElementById('scriptContent').value = template;
    document.getElementById('scriptName').value = 'network-test.sh';
    log('Network test template loaded', 'success');
}

function loadSystemInfoTemplate() {
    const template = \`#!/bin/bash
# System Information Script
echo "=== System Information ==="
echo "Hostname: $(hostname)"
echo "OS: $(uname -a)"
echo "User: $(whoami)"
echo "Memory: $(free -h | awk '/^Mem:/ {print $2}')"
echo "=== Complete ==="\`;
    
    document.getElementById('scriptContent').value = template;
    document.getElementById('scriptName').value = 'system-info.sh';
    log('System info template loaded', 'success');
}

function loadAdvancedInfoTemplate() {
    const template = \`#!/bin/bash
# Advanced System Information
echo "=== Advanced Information ==="
echo "Kernel: $(uname -rv)"
echo "Architecture: $(uname -m)"
echo "CPU: $(grep -m1 'model name' /proc/cpuinfo | cut -d: -f2 | xargs)"
echo "Containers:"
[ -f /.dockerenv ] && echo "Docker detected"
echo "=== Complete ==="\`;
    
    document.getElementById('scriptContent').value = template;
    document.getElementById('scriptName').value = 'advanced-info.sh';
    log('Advanced info template loaded', 'success');
}

function loadServiceProbeTemplate() {
    const template = \`#!/bin/bash
# Service Probe Script
echo "=== Service Probe ==="
PORTS="22 80 443 8888 873"
for port in $PORTS; do
    if ss -tuln | grep -q ":$port "; then
        echo "Port $port: OPEN"
    else
        echo "Port $port: CLOSED"
    fi
done
echo "=== Complete ==="\`;
    
    document.getElementById('scriptContent').value = template;
    document.getElementById('scriptName').value = 'service-probe.sh';
    log('Service probe template loaded', 'success');
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    log('Browser Permission Tester loaded successfully');
    log('User Agent: ' + navigator.userAgent);
});
`;
}

// Function to get HTML content (simplified inline version)
async function getHTMLContent() {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browser Permission Tester</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #333; min-height: 100vh; }
        .container { background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
        h1 { text-align: center; color: #4a5568; margin-bottom: 10px; }
        .subtitle { text-align: center; color: #718096; margin-bottom: 30px; font-style: italic; }
        .category { margin: 25px 0; padding: 20px; border: 2px solid #e2e8f0; border-radius: 10px; background: #f7fafc; }
        .category h3 { color: #2d3748; margin-top: 0; border-bottom: 2px solid #cbd5e0; padding-bottom: 10px; }
        .test-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px; }
        .test-button { background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%); color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px; transition: all 0.3s ease; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .test-button:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0,0,0,0.15); }
        .test-button:active { transform: translateY(0); }
        .test-button.danger { background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%); }
        .test-button.warning { background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%); }
        .results { margin-top: 30px; padding: 20px; background: #1a202c; color: #e2e8f0; border-radius: 10px; font-family: 'Courier New', monospace; white-space: pre-wrap; max-height: 400px; overflow-y: auto; }
        .warning-banner { background: #fed7d7; border: 2px solid #fc8181; border-radius: 8px; padding: 15px; margin-bottom: 20px; color: #c53030; font-weight: bold; }
        .file-input { margin: 10px 0; padding: 8px; border: 2px dashed #cbd5e0; border-radius: 5px; background: #f7fafc; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔒 Browser Permission Tester</h1>
        <p class="subtitle">Security research tool for testing browser permissions and capabilities</p>
        
        <div class="warning-banner">
            ⚠️ This tool is for defensive security research only. Use responsibly and only on systems you own or have explicit permission to test.
        </div>

        <div class="category">
            <h3>📁 File System Access</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testFileInput()">File Input Test</button>
                <button class="test-button" onclick="testFileSystemAccess()">File System Access API</button>
                <button class="test-button" onclick="testDragDrop()">Drag & Drop Test</button>
                <button class="test-button" onclick="testDownload()">Download Test</button>
                <button class="test-button" onclick="testFileUploadAndStore()">File Upload & Store</button>
                <button class="test-button" onclick="clearStoredFiles()">Clear Stored Files</button>
            </div>
            <input type="file" id="fileInput" class="file-input" style="display:none" onchange="handleFileSelect()" multiple>
            <input type="file" id="uploadInput" class="file-input" style="display:none" onchange="handleFileUpload()" multiple accept="*/*">
            <div id="dropZone" class="file-input" style="display:none; text-align:center; padding:20px;">Drop files here to test drag & drop</div>
            <div id="storedFilesContainer" style="display:none; margin-top:15px; padding:15px; background:#f8f9fa; border-radius:8px;">
                <h4 style="margin-top:0; color:#2d3748;">📂 Stored Files</h4>
                <div id="storedFilesList"></div>
            </div>
        </div>

        <div class="category">
            <h3>🌐 Network Access</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testFetch()">Fetch API Test</button>
                <button class="test-button" onclick="testCrossOrigin()">Cross-Origin Request</button>
                <button class="test-button" onclick="testWebSocket()">WebSocket Test</button>
                <button class="test-button" onclick="testWebRTC()">WebRTC Test</button>
            </div>
        </div>

        <div class="category">
            <h3>📱 Device Permissions</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testCamera()">Camera Access</button>
                <button class="test-button" onclick="testMicrophone()">Microphone Access</button>
                <button class="test-button" onclick="testGeolocation()">Geolocation</button>
                <button class="test-button" onclick="testDeviceOrientation()">Device Motion</button>
                <button class="test-button" onclick="testClipboard()">Clipboard Access</button>
                <button class="test-button" onclick="testNotifications()">Notifications</button>
            </div>
        </div>

        <div class="category">
            <h3>💾 Storage & Data</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testLocalStorage()">Local Storage</button>
                <button class="test-button" onclick="testIndexedDB()">IndexedDB</button>
                <button class="test-button" onclick="testCookies()">Cookies</button>
                <button class="test-button" onclick="testCacheAPI()">Cache API</button>
            </div>
        </div>

        <div class="category">
            <h3>🔴 Red Team Vectors</h3>
            <div class="test-grid">
                <button class="test-button danger" onclick="testKeylogger()">Input Monitor Test</button>
                <button class="test-button danger" onclick="testScreenCapture()">Screen Capture</button>
                <button class="test-button danger" onclick="testCredentialHarvest()">Credential Test</button>
                <button class="test-button warning" onclick="testDataExfiltration()">Data Exfiltration</button>
                <button class="test-button warning" onclick="testCSRFExtraction()">CSRF Token Extract</button>
            </div>
        </div>

        <div class="category">
            <h3>📜 Shell Script Generator</h3>
            <div style="margin-bottom: 15px;">
                <label for="scriptName" style="display: block; margin-bottom: 5px; font-weight: bold;">Script Name:</label>
                <input type="text" id="scriptName" placeholder="test-script.sh" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
            </div>
            <div style="margin-bottom: 15px;">
                <label for="scriptContent" style="display: block; margin-bottom: 5px; font-weight: bold;">Script Content:</label>
                <textarea id="scriptContent" placeholder="#!/bin/bash&#10;echo 'Hello World'&#10;# Add your commands here" style="width: 100%; height: 200px; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-family: monospace; resize: vertical;"></textarea>
            </div>
            <div class="test-grid">
                <button class="test-button" onclick="generateShellScript()">Generate & Download Script</button>
                <button class="test-button" onclick="loadTemplateScript()">Load Permission Test Template</button>
                <button class="test-button warning" onclick="loadNetworkTestTemplate()">Load Network Test Template</button>
                <button class="test-button danger" onclick="loadSystemInfoTemplate()">Load System Info Template</button>
                <button class="test-button danger" onclick="loadAdvancedInfoTemplate()">Load Advanced Info Template</button>
                <button class="test-button danger" onclick="loadServiceProbeTemplate()">Load Service Probe Template</button>
            </div>
        </div>

        <div id="results" class="results">Ready to test browser permissions...\\n</div>
    </div>

    <script src="/app.js"></script>
</body>
</html>`;
}

export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
      });
    }

    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };

    if (url.pathname === '/') {
      const htmlContent = await getHTMLContent();
      return new Response(htmlContent, {
        headers: {
          'Content-Type': 'text/html',
          ...corsHeaders,
        },
      });
    }

    if (url.pathname === '/app.js') {
      const jsContent = getJavaScriptContent();
      return new Response(jsContent, {
        headers: {
          'Content-Type': 'application/javascript',
          ...corsHeaders,
        },
      });
    }

    // Handle static file downloads (like sampletestfile.com)
    if (url.pathname.startsWith('/files/') && request.method === 'GET') {
      const filename = url.pathname.substring(7); // Remove '/files/' prefix
      
      if (STATIC_FILES[filename]) {
        console.log('Static file download:', {
          filename,
          fileSize: STATIC_FILES[filename].length,
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('User-Agent'),
          origin: request.headers.get('Origin')
        });
        
        return new Response(STATIC_FILES[filename], {
          headers: {
            'Content-Type': 'application/octet-stream',
            'Content-Disposition': 'attachment; filename="' + filename + '"',
            'Content-Length': STATIC_FILES[filename].length.toString(),
            'Cache-Control': 'public, max-age=3600', // Cache for 1 hour
            ...corsHeaders,
          },
        });
      } else {
        // Return a directory listing of available files
        const fileList = Object.keys(STATIC_FILES);
        const html = `<!DOCTYPE html>
<html>
<head>
    <title>Available Shell Scripts</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; }
        .file-list { list-style: none; padding: 0; }
        .file-item { 
            background: #f5f5f5; 
            margin: 10px 0; 
            padding: 15px; 
            border-radius: 5px; 
            border-left: 4px solid #007cba;
        }
        .file-link { 
            text-decoration: none; 
            color: #007cba; 
            font-weight: bold; 
            font-size: 18px;
        }
        .file-link:hover { color: #005a87; }
        .file-desc { color: #666; margin-top: 5px; }
        .header { border-bottom: 2px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔒 Pre-built Shell Scripts</h1>
            <p>Direct download links for security testing scripts. Click any link to download immediately.</p>
        </div>
        
        <ul class="file-list">
            <li class="file-item">
                <a href="/files/permission-test" class="file-link">permission-test.sh</a>
                <div class="file-desc">Comprehensive system permission testing script</div>
            </li>
            <li class="file-item">
                <a href="/files/system-info" class="file-link">system-info.sh</a>
                <div class="file-desc">System information gathering and enumeration</div>
            </li>
            <li class="file-item">
                <a href="/files/network-test" class="file-link">network-test.sh</a>
                <div class="file-desc">Network connectivity testing template (defensive only)</div>
            </li>
            <li class="file-item">
                <a href="/files/basic-enum" class="file-link">basic-enum.sh</a>
                <div class="file-desc">Basic system enumeration script</div>
            </li>
            <li class="file-item">
                <a href="/files/web-test" class="file-link">web-test.sh</a>
                <div class="file-desc">Web service and connectivity testing</div>
            </li>
            <li class="file-item">
                <a href="/files/advanced-info" class="file-link">advanced-info.sh</a>
                <div class="file-desc">Comprehensive system information and security assessment</div>
            </li>
            <li class="file-item">
                <a href="/files/service-probe" class="file-link">service-probe.sh</a>
                <div class="file-desc">Port scanning and exposed service analysis</div>
            </li>
            <li class="file-item">
                <a href="/files/basic-info" class="file-link">basic-info.sh</a>
                <div class="file-desc">Basic system information gathering</div>
            </li>
        </ul>
        
        <div style="margin-top: 40px; padding: 20px; background: #fff3cd; border-radius: 5px;">
            <strong>⚠️ Security Notice:</strong> These scripts are for defensive security testing only. 
            Use responsibly and only on systems you own or have explicit permission to test.
        </div>
        
        <div style="margin-top: 20px; text-align: center;">
            <a href="/" style="color: #007cba;">← Back to Permission Tester</a>
        </div>
    </div>
</body>
</html>`;
        
        return new Response(html, {
          headers: {
            'Content-Type': 'text/html',
            ...corsHeaders,
          },
        });
      }
    }

    if (url.pathname === '/api/log' && request.method === 'POST') {
      try {
        const data = await request.json();
        console.log('Permission test result:', JSON.stringify(data, null, 2));
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: 'Test result logged',
          timestamp: new Date().toISOString()
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      } catch (error) {
        return new Response(JSON.stringify({ 
          success: false, 
          error: error.message 
        }), {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      }
    }

    if (url.pathname === '/api/external-test') {
      return new Response(JSON.stringify({
        message: 'External API endpoint for cross-origin testing',
        origin: request.headers.get('Origin'),
        userAgent: request.headers.get('User-Agent'),
        timestamp: new Date().toISOString()
      }), {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      });
    }

    if (url.pathname === '/api/generate-script' && request.method === 'POST') {
      try {
        const data = await request.json();
        const { filename, content } = data;
        
        if (!filename || !content) {
          return new Response(JSON.stringify({ 
            success: false, 
            error: 'Filename and content are required' 
          }), {
            status: 400,
            headers: {
              'Content-Type': 'application/json',
              ...corsHeaders,
            },
          });
        }

        // Log script generation for security monitoring
        console.log('Script generation request:', {
          filename,
          contentLength: content.length,
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('User-Agent'),
          origin: request.headers.get('Origin')
        });
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: 'Script generation logged',
          filename,
          size: content.length,
          timestamp: new Date().toISOString()
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      } catch (error) {
        return new Response(JSON.stringify({ 
          success: false, 
          error: error.message 
        }), {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      }
    }

    if (url.pathname === '/api/create-download-link' && request.method === 'POST') {
      try {
        const data = await request.json();
        const { downloadId, filename, content } = data;
        
        if (!downloadId || !filename || !content) {
          return new Response(JSON.stringify({ 
            success: false, 
            error: 'Download ID, filename and content are required' 
          }), {
            status: 400,
            headers: {
              'Content-Type': 'application/json',
              ...corsHeaders,
            },
          });
        }

        // Create a direct download URL (similar to sampletestfile.com approach)
        const downloadUrl = '/download/' + encodeURIComponent(downloadId) + '/' + encodeURIComponent(filename);
        
        // Log download link creation for security monitoring
        console.log('Download link created:', {
          downloadId,
          filename,
          contentLength: content.length,
          downloadUrl,
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('User-Agent'),
          origin: request.headers.get('Origin')
        });
        
        return new Response(JSON.stringify({ 
          success: true, 
          downloadUrl: downloadUrl,
          downloadId: downloadId
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      } catch (error) {
        return new Response(JSON.stringify({ 
          success: false, 
          error: error.message 
        }), {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        });
      }
    }

    if (url.pathname.startsWith('/download/') && request.method === 'GET') {
      try {
        const pathParts = url.pathname.split('/');
        const downloadId = pathParts[2];
        const filename = pathParts[3];
        
        if (!downloadId || !filename) {
          return new Response('Invalid download URL', { 
            status: 400,
            headers: corsHeaders,
          });
        }

        // For Cloudflare Workers, we'll need to get content from the original request
        // Since we can't store it persistently, we'll return a script that prompts user
        const html = `<!DOCTYPE html>
<html>
<head>
    <title>Download ${decodeURIComponent(filename)}</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 500px; margin: 0 auto; }
        .error { color: #d32f2f; }
        .info { color: #1976d2; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Download ${decodeURIComponent(filename)}</h2>
        <p class="error">Direct download link expired. Please return to the original page and generate the script again.</p>
        <p class="info">For better reliability, the download will be processed immediately when you click the generate button.</p>
        <button onclick="window.close()">Close Window</button>
    </div>
</body>
</html>`;
        
        return new Response(html, {
          headers: {
            'Content-Type': 'text/html',
            ...corsHeaders,
          },
        });
      } catch (error) {
        return new Response('Download failed: ' + error.message, {
          status: 500,
          headers: corsHeaders,
        });
      }
    }

    if (url.pathname === '/api/download-script' && request.method === 'POST') {
      try {
        let filename, content;
        
        // Handle both JSON and form data
        if (request.headers.get('Content-Type')?.includes('application/json')) {
          const data = await request.json();
          filename = data.filename;
          content = data.content;
        } else {
          // Handle form data
          const formData = await request.formData();
          filename = formData.get('filename');
          content = formData.get('content');
        }
        
        if (!filename || !content) {
          return new Response('Filename and content are required', { 
            status: 400,
            headers: corsHeaders,
          });
        }

        // Log download attempt for security monitoring
        console.log('Server-side download request:', {
          filename,
          contentLength: content.length,
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('User-Agent'),
          origin: request.headers.get('Origin')
        });
        
        return new Response(content, {
          headers: {
            'Content-Type': 'application/octet-stream',
            'Content-Disposition': 'attachment; filename="' + filename + '"',
            'Content-Length': content.length.toString(),
            ...corsHeaders,
          },
        });
      } catch (error) {
        return new Response('Download failed: ' + error.message, {
          status: 500,
          headers: corsHeaders,
        });
      }
    }


    return new Response('Not found', { 
      status: 404,
      headers: corsHeaders,
    });
  },
};

const HTML_CONTENT = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browser Permission Tester</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        h1 {
            text-align: center;
            color: #4a5568;
            margin-bottom: 10px;
        }
        .subtitle {
            text-align: center;
            color: #718096;
            margin-bottom: 30px;
            font-style: italic;
        }
        .category {
            margin: 25px 0;
            padding: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            background: #f7fafc;
        }
        .category h3 {
            color: #2d3748;
            margin-top: 0;
            border-bottom: 2px solid #cbd5e0;
            padding-bottom: 10px;
        }
        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        .test-button {
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .test-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        .test-button:active {
            transform: translateY(0);
        }
        .test-button.danger {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
        }
        .test-button.warning {
            background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
        }
        .results {
            margin-top: 30px;
            padding: 20px;
            background: #1a202c;
            color: #e2e8f0;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        .warning-banner {
            background: #fed7d7;
            border: 2px solid #fc8181;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            color: #c53030;
            font-weight: bold;
        }
        .file-input {
            margin: 10px 0;
            padding: 8px;
            border: 2px dashed #cbd5e0;
            border-radius: 5px;
            background: #f7fafc;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔒 Browser Permission Tester</h1>
        <p class="subtitle">Security research tool for testing browser permissions and capabilities</p>
        
        <div class="warning-banner">
            ⚠️ This tool is for defensive security research only. Use responsibly and only on systems you own or have explicit permission to test.
        </div>

        <div class="category">
            <h3>📁 File System Access</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testFileInput()">File Input Test</button>
                <button class="test-button" onclick="testFileSystemAccess()">File System Access API</button>
                <button class="test-button" onclick="testDragDrop()">Drag & Drop Test</button>
                <button class="test-button" onclick="testDownload()">Download Test</button>
                <button class="test-button" onclick="testFileUploadAndStore()">File Upload & Store</button>
                <button class="test-button" onclick="clearStoredFiles()">Clear Stored Files</button>
            </div>
            <input type="file" id="fileInput" class="file-input" style="display:none" onchange="handleFileSelect()" multiple>
            <input type="file" id="uploadInput" class="file-input" style="display:none" onchange="handleFileUpload()" multiple accept="*/*">
            <div id="dropZone" class="file-input" style="display:none; text-align:center; padding:20px;">
                Drop files here to test drag & drop
            </div>
            <div id="storedFilesContainer" style="display:none; margin-top:15px; padding:15px; background:#f8f9fa; border-radius:8px;">
                <h4 style="margin-top:0; color:#2d3748;">📂 Stored Files</h4>
                <div id="storedFilesList"></div>
            </div>
        </div>

        <div class="category">
            <h3>🌐 Network Access</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testFetch()">Fetch API Test</button>
                <button class="test-button" onclick="testCrossOrigin()">Cross-Origin Request</button>
                <button class="test-button" onclick="testWebSocket()">WebSocket Test</button>
                <button class="test-button" onclick="testWebRTC()">WebRTC Test</button>
            </div>
        </div>

        <div class="category">
            <h3>📱 Device Permissions</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testCamera()">Camera Access</button>
                <button class="test-button" onclick="testMicrophone()">Microphone Access</button>
                <button class="test-button" onclick="testGeolocation()">Geolocation</button>
                <button class="test-button" onclick="testDeviceOrientation()">Device Motion</button>
                <button class="test-button" onclick="testClipboard()">Clipboard Access</button>
                <button class="test-button" onclick="testNotifications()">Notifications</button>
            </div>
        </div>

        <div class="category">
            <h3>💾 Storage & Data</h3>
            <div class="test-grid">
                <button class="test-button" onclick="testLocalStorage()">Local Storage</button>
                <button class="test-button" onclick="testIndexedDB()">IndexedDB</button>
                <button class="test-button" onclick="testCookies()">Cookies</button>
                <button class="test-button" onclick="testCacheAPI()">Cache API</button>
            </div>
        </div>

        <div class="category">
            <h3>🔴 Red Team Vectors</h3>
            <div class="test-grid">
                <button class="test-button danger" onclick="testKeylogger()">Input Monitor Test</button>
                <button class="test-button danger" onclick="testScreenCapture()">Screen Capture</button>
                <button class="test-button danger" onclick="testCredentialHarvest()">Credential Test</button>
                <button class="test-button warning" onclick="testDataExfiltration()">Data Exfiltration</button>
                <button class="test-button warning" onclick="testCSRFExtraction()">CSRF Token Extract</button>
            </div>
        </div>

        <div class="category">
            <h3>📜 Shell Script Generator</h3>
            <div style="margin-bottom: 15px;">
                <label for="scriptName" style="display: block; margin-bottom: 5px; font-weight: bold;">Script Name:</label>
                <input type="text" id="scriptName" placeholder="test-script.sh" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
            </div>
            <div style="margin-bottom: 15px;">
                <label for="scriptContent" style="display: block; margin-bottom: 5px; font-weight: bold;">Script Content:</label>
                <textarea id="scriptContent" placeholder="#!/bin/bash&#10;echo 'Hello World'&#10;# Add your commands here" style="width: 100%; height: 200px; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-family: monospace; resize: vertical;"></textarea>
            </div>
            <div class="test-grid">
                <button class="test-button" onclick="generateShellScript()">Generate & Download Script</button>
                <button class="test-button" onclick="loadTemplateScript()">Load Permission Test Template</button>
                <button class="test-button warning" onclick="loadNetworkTestTemplate()">Load Network Test Template</button>
                <button class="test-button danger" onclick="loadSystemInfoTemplate()">Load System Info Template</button>
                <button class="test-button danger" onclick="loadAdvancedInfoTemplate()">Load Advanced Info Template</button>
                <button class="test-button danger" onclick="loadServiceProbeTemplate()">Load Service Probe Template</button>
            </div>
        </div>

        <div id="results" class="results">Ready to test browser permissions...\n</div>
    </div>

    <script>
        let keylogBuffer = [];
        let isKeylogging = false;
        let storedFiles = new Map(); // Store files in memory

        function log(message, type = 'info') {
            const timestamp = new Date().toISOString();
            const results = document.getElementById('results');
            const prefix = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';
            results.textContent += '[' + timestamp + '] ' + prefix + ' ' + message + '\\n';
            results.scrollTop = results.scrollHeight;
            
            // Send to backend
            fetch('/api/log', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ timestamp, type, message })
            }).catch(e => console.error('Failed to log to backend:', e));
        }

        // File System Tests
        function testFileInput() {
            document.getElementById('fileInput').style.display = 'block';
            document.getElementById('fileInput').click();
        }

        function handleFileSelect() {
            const files = document.getElementById('fileInput').files;
            log('File input selected ' + files.length + ' files: ' + Array.from(files).map(f => f.name).join(', '), 'success');
        }

        async function testFileSystemAccess() {
            if ('showOpenFilePicker' in window) {
                try {
                    const fileHandles = await window.showOpenFilePicker({ multiple: true });
                    log('File System Access API: Selected ' + fileHandles.length + ' files', 'success');
                    for (const handle of fileHandles) {
                        const file = await handle.getFile();
                        log('  - ' + file.name + ' (' + file.size + ' bytes)', 'info');
                    }
                } catch (error) {
                    log('File System Access API error: ' + error.message, 'error');
                }
            } else {
                log('File System Access API not supported', 'error');
            }
        }

        function testDragDrop() {
            const dropZone = document.getElementById('dropZone');
            dropZone.style.display = 'block';
            
            dropZone.ondragover = (e) => {
                e.preventDefault();
                dropZone.style.background = '#e6fffa';
            };
            
            dropZone.ondragleave = () => {
                dropZone.style.background = '#f7fafc';
            };
            
            dropZone.ondrop = (e) => {
                e.preventDefault();
                const files = e.dataTransfer.files;
                log('Drag & drop: Received ' + files.length + ' files', 'success');
                for (const file of files) {
                    log('  - ' + file.name + ' (' + file.size + ' bytes)', 'info');
                }
                dropZone.style.background = '#f7fafc';
            };
        }

        function testDownload() {
            const blob = new Blob(['Test file content for download'], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'test-download.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            log('Download test: File download initiated', 'success');
        }

        function testFileUploadAndStore() {
            document.getElementById('uploadInput').click();
        }

        async function handleFileUpload() {
            const fileInput = document.getElementById('uploadInput');
            const files = fileInput.files;
            
            if (!files.length) {
                log('No files selected', 'error');
                return;
            }

            log('Processing ' + files.length + ' files for storage...', 'info');

            for (const file of files) {
                try {
                    await processAndStoreFile(file);
                } catch (error) {
                    log('Error processing file ' + file.name + ': ' + error.message, 'error');
                }
            }

            updateStoredFilesDisplay();
            fileInput.value = ''; // Clear the input
        }

        async function processAndStoreFile(file) {
            const fileId = generateFileId();
            const maxSize = 10 * 1024 * 1024; // 10MB limit

            if (file.size > maxSize) {
                throw new Error('File too large (max 10MB)');
            }

            const fileInfo = {
                id: fileId,
                name: file.name,
                size: file.size,
                type: file.type,
                lastModified: file.lastModified,
                uploadTime: Date.now()
            };

            // Read file content
            const content = await readFileContent(file);
            fileInfo.content = content;
            fileInfo.contentPreview = getContentPreview(content, file.type);

            // Store file
            storedFiles.set(fileId, fileInfo);
            
            log('File stored: ' + file.name + ' (' + formatFileSize(file.size) + ')', 'success');

            // Log to backend
            try {
                await fetch('/api/log', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        type: 'file_upload',
                        filename: file.name,
                        size: file.size,
                        type: file.type,
                        timestamp: new Date().toISOString()
                    })
                });
            } catch (e) {
                console.error('Failed to log file upload:', e);
            }
        }

        function readFileContent(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    try {
                        if (file.type.startsWith('text/') || file.type === 'application/json' || file.name.endsWith('.txt') || file.name.endsWith('.js') || file.name.endsWith('.html') || file.name.endsWith('.css')) {
                            // Read as text for text files
                            resolve({
                                type: 'text',
                                data: e.target.result
                            });
                        } else {
                            // Read as base64 for binary files
                            resolve({
                                type: 'base64',
                                data: e.target.result.split(',')[1] // Remove data:... prefix
                            });
                        }
                    } catch (error) {
                        reject(error);
                    }
                };
                
                reader.onerror = () => reject(new Error('Failed to read file'));
                
                if (file.type.startsWith('text/') || file.type === 'application/json' || file.name.endsWith('.txt') || file.name.endsWith('.js') || file.name.endsWith('.html') || file.name.endsWith('.css')) {
                    reader.readAsText(file);
                } else {
                    reader.readAsDataURL(file);
                }
            });
        }

        function getContentPreview(content, fileType) {
            if (content.type === 'text') {
                return content.data.substring(0, 200) + (content.data.length > 200 ? '...' : '');
            } else {
                return '[Binary content - ' + fileType + ']';
            }
        }

        function generateFileId() {
            return 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function updateStoredFilesDisplay() {
            const container = document.getElementById('storedFilesContainer');
            const filesList = document.getElementById('storedFilesList');
            
            if (storedFiles.size === 0) {
                container.style.display = 'none';
                return;
            }

            container.style.display = 'block';
            filesList.innerHTML = '';

            Array.from(storedFiles.values())
                .sort((a, b) => b.uploadTime - a.uploadTime)
                .forEach(file => {
                    const fileElement = createFileElement(file);
                    filesList.appendChild(fileElement);
                });
        }

        function createFileElement(file) {
            const div = document.createElement('div');
            div.className = 'stored-file-item';
            div.style.cssText = 'margin:10px 0; padding:12px; border:1px solid #e2e8f0; border-radius:6px; background:white;';
            
            const uploadTime = new Date(file.uploadTime).toLocaleString();
            
            div.innerHTML = '<div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:8px;">' +
                '<strong style="color:#2d3748;">' + escapeHtml(file.name) + '</strong>' +
                '<span style="color:#718096; font-size:12px;">' + uploadTime + '</span>' +
                '</div>' +
                '<div style="font-size:13px; color:#4a5568; margin-bottom:8px;">' +
                'Size: ' + formatFileSize(file.size) + ' | Type: ' + (file.type || 'Unknown') +
                '</div>' +
                '<div style="background:#f7fafc; padding:8px; border-radius:4px; font-family:monospace; font-size:12px; color:#2d3748; margin-bottom:8px; max-height:60px; overflow-y:auto;">' +
                escapeHtml(file.contentPreview) +
                '</div>' +
                '<div style="display:flex; gap:8px;">' +
                '<button onclick="viewFileContent(\'' + file.id + '\')" style="padding:4px 8px; background:#4299e1; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">View</button>' +
                '<button onclick="downloadStoredFile(\'' + file.id + '\')" style="padding:4px 8px; background:#48bb78; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">Download</button>' +
                '<button onclick="deleteStoredFile(\'' + file.id + '\')" style="padding:4px 8px; background:#f56565; color:white; border:none; border-radius:4px; font-size:12px; cursor:pointer;">Delete</button>' +
                '</div>';
            
            return div;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function viewFileContent(fileId) {
            const file = storedFiles.get(fileId);
            if (!file) {
                log('File not found: ' + fileId, 'error');
                return;
            }

            // Create modal to display file content
            const modal = document.createElement('div');
            modal.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.8); z-index:10000; display:flex; align-items:center; justify-content:center;';
            
            const content = document.createElement('div');
            content.style.cssText = 'background:white; padding:20px; border-radius:10px; max-width:80%; max-height:80%; overflow:auto; position:relative;';
            
            const closeBtn = document.createElement('button');
            closeBtn.textContent = '✕';
            closeBtn.style.cssText = 'position:absolute; top:10px; right:15px; background:none; border:none; font-size:20px; cursor:pointer; color:#666;';
            closeBtn.onclick = () => document.body.removeChild(modal);
            
            const title = document.createElement('h3');
            title.textContent = file.name;
            title.style.marginTop = '0';
            
            const info = document.createElement('div');
            info.style.cssText = 'margin-bottom:15px; padding:10px; background:#f8f9fa; border-radius:5px; font-size:14px;';
            info.innerHTML = '<strong>Size:</strong> ' + formatFileSize(file.size) + '<br>' +
                '<strong>Type:</strong> ' + file.type + '<br>' +
                '<strong>Uploaded:</strong> ' + new Date(file.uploadTime).toLocaleString();
            
            const fileContent = document.createElement('div');
            fileContent.style.cssText = 'background:#f7fafc; padding:15px; border-radius:5px; font-family:monospace; font-size:12px; white-space:pre-wrap; max-height:400px; overflow-y:auto;';
            
            if (file.content.type === 'text') {
                fileContent.textContent = file.content.data;
            } else {
                fileContent.innerHTML = '<em>Binary file content (base64 encoded):</em><br>' + file.content.data.substring(0, 1000) + (file.content.data.length > 1000 ? '...' : '');
            }
            
            content.appendChild(closeBtn);
            content.appendChild(title);
            content.appendChild(info);
            content.appendChild(fileContent);
            modal.appendChild(content);
            document.body.appendChild(modal);
            
            log('Viewing file content: ' + file.name, 'info');
        }

        function downloadStoredFile(fileId) {
            const file = storedFiles.get(fileId);
            if (!file) {
                log('File not found: ' + fileId, 'error');
                return;
            }

            try {
                let blob;
                if (file.content.type === 'text') {
                    blob = new Blob([file.content.data], { type: file.type || 'text/plain' });
                } else {
                    // Convert base64 back to binary
                    const binaryString = atob(file.content.data);
                    const bytes = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    blob = new Blob([bytes], { type: file.type || 'application/octet-stream' });
                }

                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = file.name;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                log('Downloaded stored file: ' + file.name, 'success');
            } catch (error) {
                log('Download failed: ' + error.message, 'error');
            }
        }

        function deleteStoredFile(fileId) {
            const file = storedFiles.get(fileId);
            if (!file) {
                log('File not found: ' + fileId, 'error');
                return;
            }

            if (confirm('Delete file "' + file.name + '"?')) {
                storedFiles.delete(fileId);
                updateStoredFilesDisplay();
                log('Deleted stored file: ' + file.name, 'success');
            }
        }

        function clearStoredFiles() {
            if (storedFiles.size === 0) {
                log('No files to clear', 'info');
                return;
            }

            if (confirm('Clear all stored files (' + storedFiles.size + ' files)?')) {
                const count = storedFiles.size;
                storedFiles.clear();
                updateStoredFilesDisplay();
                log('Cleared all stored files (' + count + ' files)', 'success');
            }
        }

        // Network Tests
        async function testFetch() {
            try {
                const response = await fetch('/api/external-test');
                const data = await response.json();
                log('Fetch API test: ' + JSON.stringify(data), 'success');
            } catch (error) {
                log('Fetch API error: ' + error.message, 'error');
            }
        }

        async function testCrossOrigin() {
            try {
                const response = await fetch('https://httpbin.org/json');
                const data = await response.json();
                log('Cross-origin request successful', 'success');
            } catch (error) {
                log('Cross-origin request blocked: ' + error.message, 'error');
            }
        }

        function testWebSocket() {
            try {
                const ws = new WebSocket('wss://echo.websocket.org');
                ws.onopen = () => {
                    log('WebSocket connection established', 'success');
                    ws.send('Test message');
                };
                ws.onmessage = (event) => {
                    log('WebSocket received: ' + event.data, 'success');
                    ws.close();
                };
                ws.onerror = (error) => {
                    log('WebSocket error: ' + error, 'error');
                };
            } catch (error) {
                log('WebSocket test error: ' + error.message, 'error');
            }
        }

        async function testWebRTC() {
            try {
                const pc = new RTCPeerConnection();
                const offer = await pc.createOffer();
                log('WebRTC offer created successfully', 'success');
                pc.close();
            } catch (error) {
                log('WebRTC error: ' + error.message, 'error');
            }
        }

        // Device Permission Tests
        async function testCamera() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                log('Camera access granted', 'success');
                stream.getTracks().forEach(track => track.stop());
            } catch (error) {
                log('Camera access denied: ' + error.message, 'error');
            }
        }

        async function testMicrophone() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                log('Microphone access granted', 'success');
                stream.getTracks().forEach(track => track.stop());
            } catch (error) {
                log('Microphone access denied: ' + error.message, 'error');
            }
        }

        async function testGeolocation() {
            if ('geolocation' in navigator) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        log('Geolocation: ' + position.coords.latitude + ', ' + position.coords.longitude, 'success');
                    },
                    (error) => {
                        log('Geolocation error: ' + error.message, 'error');
                    }
                );
            } else {
                log('Geolocation not supported', 'error');
            }
        }

        function testDeviceOrientation() {
            if ('DeviceOrientationEvent' in window) {
                const handler = (event) => {
                    log('Device orientation: α=' + event.alpha + ', β=' + event.beta + ', γ=' + event.gamma, 'success');
                    window.removeEventListener('deviceorientation', handler);
                };
                window.addEventListener('deviceorientation', handler);
                setTimeout(() => {
                    window.removeEventListener('deviceorientation', handler);
                    log('Device orientation timeout - no data received', 'error');
                }, 3000);
            } else {
                log('Device orientation not supported', 'error');
            }
        }

        async function testClipboard() {
            if ('clipboard' in navigator) {
                try {
                    await navigator.clipboard.writeText('Test clipboard content');
                    const text = await navigator.clipboard.readText();
                    log('Clipboard access: wrote and read "' + text + '"', 'success');
                } catch (error) {
                    log('Clipboard error: ' + error.message, 'error');
                }
            } else {
                log('Clipboard API not supported', 'error');
            }
        }

        async function testNotifications() {
            if ('Notification' in window) {
                const permission = await Notification.requestPermission();
                log('Notification permission: ' + permission, permission === 'granted' ? 'success' : 'error');
                if (permission === 'granted') {
                    new Notification('Test notification from permission tester');
                }
            } else {
                log('Notifications not supported', 'error');
            }
        }

        // Storage Tests
        function testLocalStorage() {
            try {
                localStorage.setItem('test', 'value');
                const value = localStorage.getItem('test');
                localStorage.removeItem('test');
                log('Local storage: wrote and read "' + value + '"', 'success');
            } catch (error) {
                log('Local storage error: ' + error.message, 'error');
            }
        }

        async function testIndexedDB() {
            if ('indexedDB' in window) {
                try {
                    const request = indexedDB.open('testDB', 1);
                    request.onsuccess = () => {
                        log('IndexedDB: Database opened successfully', 'success');
                        request.result.close();
                        indexedDB.deleteDatabase('testDB');
                    };
                    request.onerror = () => {
                        log('IndexedDB error: ' + request.error, 'error');
                    };
                } catch (error) {
                    log('IndexedDB error: ' + error.message, 'error');
                }
            } else {
                log('IndexedDB not supported', 'error');
            }
        }

        function testCookies() {
            try {
                document.cookie = 'test=value; path=/';
                const cookies = document.cookie;
                log('Cookies: ' + cookies, 'success');
            } catch (error) {
                log('Cookie error: ' + error.message, 'error');
            }
        }

        async function testCacheAPI() {
            if ('caches' in window) {
                try {
                    const cache = await caches.open('test-cache');
                    await cache.put('/test', new Response('test'));
                    const response = await cache.match('/test');
                    const text = await response.text();
                    log('Cache API: stored and retrieved "' + text + '"', 'success');
                    await caches.delete('test-cache');
                } catch (error) {
                    log('Cache API error: ' + error.message, 'error');
                }
            } else {
                log('Cache API not supported', 'error');
            }
        }

        // Red Team Tests
        function testKeylogger() {
            if (!isKeylogging) {
                isKeylogging = true;
                keylogBuffer = [];
                document.addEventListener('keydown', keylogHandler);
                log('Keylogger started - type something to test', 'success');
                setTimeout(() => {
                    document.removeEventListener('keydown', keylogHandler);
                    isKeylogging = false;
                    log('Input monitoring captured: ' + keylogBuffer.join(''), 'success');
                }, 10000);
            }
        }

        function keylogHandler(event) {
            keylogBuffer.push(event.key);
            if (keylogBuffer.length > 50) {
                keylogBuffer.shift();
            }
        }

        async function testScreenCapture() {
            try {
                const stream = await navigator.mediaDevices.getDisplayMedia({ video: true });
                log('Screen capture access granted', 'success');
                stream.getTracks().forEach(track => track.stop());
            } catch (error) {
                log('Screen capture denied: ' + error.message, 'error');
            }
        }

        function testCredentialHarvest() {
            const form = document.createElement('form');
            form.innerHTML = \`
                <input type="text" placeholder="Username" id="testUsername">
                <input type="password" placeholder="Password" id="testPassword">
                <button type="submit">Test Submit</button>
            \`;
            form.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:2px solid #ccc;z-index:1000;';
            
            form.onsubmit = (e) => {
                e.preventDefault();
                const username = document.getElementById('testUsername').value;
                const password = document.getElementById('testPassword').value;
                log('Credential harvest test: username="' + username + '", password="' + password + '"', 'success');
                document.body.removeChild(form);
            };
            
            document.body.appendChild(form);
            log('Credential harvest form displayed', 'info');
        }

        async function testDataExfiltration() {
            const sensitiveData = {
                userAgent: navigator.userAgent,
                platform: navigator.platform,
                language: navigator.language,
                cookieEnabled: navigator.cookieEnabled,
                onLine: navigator.onLine,
                screenResolution: screen.width + 'x' + screen.height,
                availableScreenSize: screen.availWidth + 'x' + screen.availHeight,
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
            };
            
            try {
                const response = await fetch('/api/log', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ type: 'exfiltration', data: sensitiveData })
                });
                log('Data exfiltration test: Sensitive data sent to server', 'success');
            } catch (error) {
                log('Data exfiltration failed: ' + error.message, 'error');
            }
        }

        function testCSRFExtraction() {
            const tokens = [];
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                const csrfInputs = form.querySelectorAll('input[name*="csrf"], input[name*="token"]');
                csrfInputs.forEach(input => {
                    tokens.push({ name: input.name, value: input.value });
                });
            });
            
            const metaTags = document.querySelectorAll('meta[name*="csrf"], meta[name*="token"]');
            metaTags.forEach(meta => {
                tokens.push({ name: meta.name, content: meta.content });
            });
            
            log('CSRF token extraction: Found ' + tokens.length + ' potential tokens', tokens.length > 0 ? 'success' : 'info');
            tokens.forEach(token => {
                log('  - ' + token.name + ': ' + (token.value || token.content), 'info');
            });
        }

        // Shell Script Generator Functions
        function downloadFile(filename, content) {
            // Method 1: Direct link download (most reliable like sampletestfile.com)
            downloadFileMethod1(filename, content);
        }
        
        function downloadFileMethod1(filename, content) {
            // Method 1: Simple anchor click with data URL (like sampletestfile.com approach)
            try {
                // Create data URL (most compatible approach)
                const dataUrl = 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(content);
                
                // Create anchor element and trigger click (sampletestfile.com style)
                const a = document.createElement('a');
                a.href = dataUrl;
                a.download = filename;
                a.style.display = 'none';
                
                // Add to DOM, click, then remove (standard pattern)
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                
                log('Downloaded via data URL method: ' + filename, 'success');
            } catch (error) {
                log('Data URL method failed: ' + error.message, 'error');
                downloadFileMethod2(filename, content);
            }
        }
        
        function downloadFileMethod2(filename, content) {
            // Method 2: Form POST download (works when fetch is blocked)
            try {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/api/download-script';
                form.style.display = 'none';
                
                const filenameInput = document.createElement('input');
                filenameInput.type = 'hidden';
                filenameInput.name = 'filename';
                filenameInput.value = filename;
                
                const contentInput = document.createElement('input');
                contentInput.type = 'hidden';
                contentInput.name = 'content';
                contentInput.value = content;
                
                form.appendChild(filenameInput);
                form.appendChild(contentInput);
                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
                
                log('Downloaded via form POST method: ' + filename, 'success');
            } catch (error) {
                log('Form POST failed: ' + error.message, 'error');
                downloadFileMethod3(filename, content);
            }
        }
        
        function downloadFileMethod3(filename, content) {
            // Method 3: Standard blob download
            try {
                const blob = new Blob([content], { type: 'application/octet-stream' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                log('Downloaded via blob method: ' + filename, 'success');
            } catch (error) {
                log('Blob download failed: ' + error.message, 'error');
                downloadFileMethod4(filename, content);
            }
        }
        
        function downloadFileMethod4(filename, content) {
            // Method 4: Data URI download
            try {
                const dataUri = 'data:application/octet-stream;base64,' + btoa(unescape(encodeURIComponent(content)));
                const a = document.createElement('a');
                a.href = dataUri;
                a.download = filename;
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                log('Downloaded via data URI method: ' + filename, 'success');
            } catch (error) {
                log('Data URI download failed: ' + error.message, 'error');
                copyToClipboard(content, filename);
            }
        }
        
        function copyToClipboard(content, filename) {
            try {
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(content).then(() => {
                        log('Script copied to clipboard (download failed): ' + filename, 'success');
                        alert('Download blocked by browser security. Script content copied to clipboard instead. Paste into a text file and save as: ' + filename);
                    }).catch(err => {
                        showTextareaFallback(content, filename);
                    });
                } else {
                    showTextareaFallback(content, filename);
                }
                return true;
            } catch (error) {
                showTextareaFallback(content, filename);
                return false;
            }
        }
        
        function showTextareaFallback(content, filename) {
            // Final fallback: show content in a textarea for manual copy
            const modal = document.createElement('div');
            modal.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:10000;display:flex;align-items:center;justify-content:center;';
            
            const container = document.createElement('div');
            container.style.cssText = 'background:white;padding:20px;border-radius:10px;max-width:80%;max-height:80%;overflow:auto;';
            
            const title = document.createElement('h3');
            title.textContent = 'Download Blocked - Manual Copy Required';
            title.style.marginTop = '0';
            
            const instructions = document.createElement('p');
            instructions.innerHTML = 'Your browser blocked the download. Please copy the content below and save it as: <strong>' + filename + '</strong>';
            
            const textarea = document.createElement('textarea');
            textarea.value = content;
            textarea.style.cssText = 'width:100%;height:300px;font-family:monospace;font-size:12px;';
            textarea.readOnly = true;
            
            const buttonContainer = document.createElement('div');
            buttonContainer.style.cssText = 'margin-top:15px;text-align:right;';
            
            const copyBtn = document.createElement('button');
            copyBtn.textContent = 'Copy to Clipboard';
            copyBtn.style.cssText = 'margin-right:10px;padding:8px 16px;background:#007cba;color:white;border:none;border-radius:4px;cursor:pointer;';
            copyBtn.onclick = () => {
                textarea.select();
                document.execCommand('copy');
                copyBtn.textContent = 'Copied!';
                setTimeout(() => copyBtn.textContent = 'Copy to Clipboard', 2000);
            };
            
            const closeBtn = document.createElement('button');
            closeBtn.textContent = 'Close';
            closeBtn.style.cssText = 'padding:8px 16px;background:#666;color:white;border:none;border-radius:4px;cursor:pointer;';
            closeBtn.onclick = () => document.body.removeChild(modal);
            
            buttonContainer.appendChild(copyBtn);
            buttonContainer.appendChild(closeBtn);
            container.appendChild(title);
            container.appendChild(instructions);
            container.appendChild(textarea);
            container.appendChild(buttonContainer);
            modal.appendChild(container);
            document.body.appendChild(modal);
            
            textarea.focus();
            textarea.select();
            
            log('Showing manual copy dialog for: ' + filename, 'info');
        }
        
        function generateShellScript() {
            const scriptName = document.getElementById('scriptName').value || 'test-script.sh';
            const scriptContent = document.getElementById('scriptContent').value;
            
            if (!scriptContent.trim()) {
                log('Error: Script content cannot be empty', 'error');
                return;
            }
            
            // Ensure script has proper shebang
            let finalContent = scriptContent;
            if (!finalContent.startsWith('#!')) {
                finalContent = '#!/bin/bash\\n' + finalContent;
            }
            
            const finalFilename = scriptName.endsWith('.sh') ? scriptName : scriptName + '.sh';
            
            // Try multiple download methods
            downloadFile(finalFilename, finalContent);
            
            // Log to backend
            fetch('/api/log', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    type: 'script_generation', 
                    filename: finalFilename,
                    size: finalContent.length,
                    timestamp: new Date().toISOString()
                })
            }).catch(e => console.error('Failed to log script generation:', e));
        }
        
        function loadTemplateScript() {
            const lines = [
                '#!/bin/bash',
                '# Permission Testing Script',
                '# Generated by Browser Permission Tester',
                '',
                'echo "=== System Permission Tests ==="',
                'echo "Current user: $(whoami)"',
                'echo "Current directory: $(pwd)"',
                'echo "Date: $(date)"',
                'echo',
                '',
                '# File system permissions',
                'echo "=== File System Tests ==="',
                'echo "Testing file creation..."',
                'touch /tmp/test_file && echo "[OK] Can create files in /tmp" || echo "[FAIL] Cannot create files in /tmp"',
                'rm -f /tmp/test_file',
                '',
                'echo "Testing directory listing..."',
                'ls /etc > /dev/null 2>&1 && echo "[OK] Can list /etc directory" || echo "[FAIL] Cannot list /etc directory"',
                '',
                'echo "Testing home directory access..."',
                'ls ~ > /dev/null 2>&1 && echo "[OK] Can access home directory" || echo "[FAIL] Cannot access home directory"',
                '',
                '# Network permissions',
                'echo "=== Network Tests ==="',
                'echo "Testing network connectivity..."',
                'ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo "[OK] Network connectivity available" || echo "[FAIL] No network connectivity"',
                '',
                'echo "Testing DNS resolution..."',
                'nslookup google.com > /dev/null 2>&1 && echo "[OK] DNS resolution working" || echo "[FAIL] DNS resolution failed"',
                '',
                '# Process permissions',
                'echo "=== Process Tests ==="',
                'echo "Testing process listing..."',
                'ps aux > /dev/null 2>&1 && echo "[OK] Can list processes" || echo "[FAIL] Cannot list processes"',
                '',
                'echo "Testing system information..."',
                'uname -a 2>/dev/null && echo "[OK] System info accessible" || echo "[FAIL] System info restricted"',
                '',
                'echo "=== Test Complete ==="'
            ];
            const template = lines.join('\\n');
            
            document.getElementById('scriptContent').value = template;
            document.getElementById('scriptName').value = 'permission-test.sh';
            log('Permission test template loaded', 'success');
        }
        
        function loadNetworkTestTemplate() {
            const lines = [
                '#!/bin/bash',
                '# Network Connectivity Template - FOR DEFENSIVE TESTING ONLY',
                '',
                '# Configuration',
                'TARGET_IP="YOUR_IP_HERE"',
                'TARGET_PORT="4444"',
                '',
                'echo "=== Network Connectivity Test ==="',
                'echo "Target: $TARGET_IP:$TARGET_PORT"',
                'echo "WARNING: This is for authorized testing only!"',
                '',
                '# Test various network methods',
                'echo "Testing netcat connectivity..."',
                'if command -v nc >/dev/null 2>&1; then',
                '    echo "Netcat available - would execute: nc $TARGET_IP $TARGET_PORT"',
                'else',
                '    echo "Netcat not available"',
                'fi',
                '',
                'echo "Testing bash connectivity..."',
                'echo "Would test: /dev/tcp/$TARGET_IP/$TARGET_PORT"',
                '',
                'echo "Testing python connectivity..."',
                'if command -v python3 >/dev/null 2>&1; then',
                '    echo "Python3 available for network testing"',
                'elif command -v python >/dev/null 2>&1; then',
                '    echo "Python2 available for network testing"',
                'else',
                '    echo "Python not available"',
                'fi',
                '',
                'echo "=== Test Complete - No actual connections made ==="',
                'echo "Replace YOUR_IP_HERE with actual target IP for testing"'
            ];
            const template = lines.join('\\n');
            
            document.getElementById('scriptContent').value = template;
            document.getElementById('scriptName').value = 'network-test.sh';
            log('Network test template loaded (for defensive testing)', 'success');
        }
        
        function loadSystemInfoTemplate() {
            const lines = [
                '#!/bin/bash',
                '# System Information Gathering Script',
                '# FOR DEFENSIVE SECURITY TESTING ONLY',
                '',
                'echo "=== System Information Gathering ==="',
                'echo "Generated: $(date)"',
                'echo "Hostname: $(hostname)"',
                'echo "OS: $(uname -a)"',
                'echo "Current user: $(whoami)"',
                'echo "User ID: $(id)"',
                'echo "Home directory: $HOME"',
                '',
                'echo "=== Network Information ==="',
                'ip addr show 2>/dev/null || ifconfig 2>/dev/null',
                'netstat -an 2>/dev/null | head -10',
                '',
                'echo "=== Process Information ==="',
                'ps aux 2>/dev/null | head -10',
                '',
                'echo "=== File System ==="',
                'df -h 2>/dev/null',
                '',
                'echo "=== Security Tools ==="',
                'command -v sudo >/dev/null 2>&1 && echo "[OK] sudo available" || echo "[FAIL] sudo not available"',
                'command -v ssh >/dev/null 2>&1 && echo "[OK] ssh available" || echo "[FAIL] ssh not available"',
                'echo "=== Complete ==="'
            ];
            const template = lines.join('\\n');
            
            document.getElementById('scriptContent').value = template;
            document.getElementById('scriptName').value = 'system-info.sh';
            log('System information template loaded', 'success');
        }
        
        function loadAdvancedInfoTemplate() {
            const lines = [
                '#!/bin/bash',
                '# Advanced System Information Script',
                '# FOR DEFENSIVE SECURITY TESTING ONLY',
                '',
                'echo "=== Advanced System Information ==="',
                'echo "Script started: $(date)"',
                'echo "Hostname: $(hostname)"',
                '',
                '# Detailed system information',
                'echo "=== Detailed System Information ==="',
                'echo "Kernel: $(uname -rv)"',
                'echo "Architecture: $(uname -m)"',
                'echo "OS: $(cat /etc/os-release 2>/dev/null | grep PRETTY_NAME | cut -d= -f2 | tr -d \'"\' || echo \'Unknown\')"',
                'echo "CPU: $(grep -m1 \'model name\' /proc/cpuinfo 2>/dev/null | cut -d: -f2 | xargs || echo \'N/A\')"',
                'echo "Memory: $(free -h 2>/dev/null | awk \'/^Mem:/ {print $2}\' || echo \'N/A\')"',
                '',
                '# Container/virtualization detection',
                'echo "=== Virtualization Detection ==="',
                '[ -f /.dockerenv ] && echo "[DETECTED] Docker container"',
                'command -v systemd-detect-virt >/dev/null 2>&1 && systemd-detect-virt',
                '[ -d /proc/vz ] && echo "[DETECTED] OpenVZ"',
                'grep -q lxc /proc/1/cgroup 2>/dev/null && echo "[DETECTED] LXC"',
                '',
                '# Network configuration',
                'echo "=== Network Configuration ==="',
                'echo "Interfaces:"',
                'ip a 2>/dev/null | grep -E "^[0-9]|inet " | head -10',
                'echo "Routes:"',
                'ip route 2>/dev/null | head -5',
                'echo "DNS:"',
                'cat /etc/resolv.conf 2>/dev/null | head -5',
                '',
                '# File systems',
                'echo "=== File Systems ==="',
                'mount 2>/dev/null | head -10',
                'df -h 2>/dev/null',
                '',
                '# Process information',
                'echo "=== Process Information ==="',
                'ps auxf 2>/dev/null | head -15',
                'echo "Services:"',
                'systemctl list-units --type=service --state=running 2>/dev/null | head -5',
                '',
                '# Security information',
                'echo "=== Security Information ==="',
                'echo "Users:"',
                'cat /etc/passwd 2>/dev/null | cut -d: -f1,3,6 | head -10',
                'echo "Sudo access:"',
                'sudo -l 2>/dev/null | head -3 || echo "No sudo or access denied"',
                '',
                '# Installed software',
                'echo "=== Installed Software ==="',
                'if command -v dpkg >/dev/null 2>&1; then',
                '    dpkg -l 2>/dev/null | head -10',
                'elif command -v rpm >/dev/null 2>&1; then',
                '    rpm -qa 2>/dev/null | head -10',
                'else',
                '    echo "Package manager not found"',
                'fi',
                '',
                '# Interesting files',
                'echo "=== Interesting Files ==="',
                'find / -name "*.key" -o -name "*.pem" -o -name "*password*" -type f 2>/dev/null | head -5',
                'find / -perm -4000 -type f 2>/dev/null | head -5',
                '',
                'echo "=== Information Complete ==="'
            ];
            const template = lines.join('\\n');
            
            document.getElementById('scriptContent').value = template;
            document.getElementById('scriptName').value = 'advanced-info.sh';
            log('Advanced info template loaded', 'success');
        }
        
        function loadServiceProbeTemplate() {
            const lines = [
                '#!/bin/bash',
                '# Service Probing and Port Analysis Script',
                '# FOR DEFENSIVE SECURITY TESTING ONLY',
                '',
                'echo "=== Service Probing and Port Analysis ==="',
                'echo "Script started: $(date)"',
                'echo "Target: $(hostname) ($(hostname -I | xargs))"',
                '',
                '# Port scanning and service identification',
                'echo "=== Port Analysis ==="',
                'EXPOSED_PORTS="873 8888 9000 1384 22 80 443"',
                '',
                'for port in $EXPOSED_PORTS; do',
                '    echo "--- Analyzing Port $port ---"',
                '    if ss -tuln | grep -q ":$port "; then',
                '        echo "[OPEN] Port $port is listening"',
                '        ss -tulnp | grep ":$port "',
                '        timeout 3 bash -c "echo | nc localhost $port" 2>/dev/null | head -3',
                '    else',
                '        echo "[CLOSED] Port $port not accessible"',
                '    fi',
                '    echo',
                'done',
                '',
                '# Jupyter analysis if port 8888 is open',
                'echo "=== Jupyter Analysis ==="',
                'if ss -tuln | grep -q ":8888 "; then',
                '    echo "Testing Jupyter accessibility..."',
                '    curl -s -I "http://localhost:8888" | head -5',
                '    echo "Jupyter API test:"',
                '    curl -s "http://localhost:8888/api/contents" | head -3',
                'fi',
                '',
                '# rsync analysis if port 873 is open',
                'echo "=== rsync Analysis ==="',
                'if ss -tuln | grep -q ":873 "; then',
                '    echo "Testing rsync modules:"',
                '    rsync --list-only rsync://localhost/ 2>/dev/null || echo "rsync access failed"',
                'fi',
                '',
                '# Service process analysis',
                'echo "=== Service Processes ==="',
                'ps aux | grep -E "(jupyter|rsync|nginx|apache|ssh)" | grep -v grep',
                '',
                '# Network connectivity tests',
                'echo "=== Network Tests ==="',
                'curl -s -I https://httpbin.org/get >/dev/null && echo "External HTTPS: OK" || echo "External HTTPS: BLOCKED"',
                'curl -s -I http://httpbin.org/get >/dev/null && echo "External HTTP: OK" || echo "External HTTP: BLOCKED"',
                '',
                'echo "=== Service Probe Complete ==="'
            ];
            const template = lines.join('\\n');
            
            document.getElementById('scriptContent').value = template;
            document.getElementById('scriptName').value = 'service-probe.sh';
            log('Service probe template loaded', 'success');
        }

        log('Browser Permission Tester loaded successfully');
        log('User Agent: ' + navigator.userAgent);
    </script>
</body>
</html>`;